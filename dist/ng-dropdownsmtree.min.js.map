{"version":3,"sources":["ng-dropdownsmtree.js"],"names":["angular","module","directive","$filter","require","replace","childArrays","parentArray","childArraysItemDisplayField","parentArrayItemDisplayField","childArraysItemSearchField","disabled","titlePlaceholder","template","iElement","iAttrs","html","controlClass","searchPlaceholder","parentArrayItemIdField","childArraysItemParentId","link","scope","ctrl","$render","showSecondLevel","selectedSubItem","$viewValue","content","find","elm","$","onEnter","removeClass","SearchSubjectFLTR","length","_arr","i","setselecteditem","$setViewValue","addClass","event","clickedItem","currentTarget","srcElement","closest","css","attr","slideToggle","toggleClass","keyCode","sb"],"mappings":"AAQC,aAEAA,QAAQC,OAAO,mBAAoB,IAE/BC,UAAO,mBAAA,CAAA,UAAA,SAAAC,GACH,MAAA,CAEAC,SAAS,KACTC,QAAQ,UACRA,SAAA,EAEIC,MAAAA,CACAC,YAAa,IACbC,YAAAA,IACAC,4BAA6B,IAC7BC,4BAA4B,IAC5BC,2BANG,IAOHC,SAAAA,IAbDA,iBAAA,KAiBHC,SAAU,SAACC,EAAUC,GA0Cb,MAxCEC,gIAmBND,EAAAE,aAnBM,4gBAwB+BF,EAAAG,kBAxB/B,iBAwB+BH,EAAAG,kBAxB/B,uTAOuJH,EAAOI,uBAP9J,8ZA0BNJ,EAAAK,wBA1BM,WA0BNL,EAAAI,uBA1BM,uBA0BNJ,EAAAL,2BA1BM,+aAgDDW,KAAA,SAAAC,EAAAR,EAAAC,EAAAQ,GAtBLA,EAAKC,QAAU,WAyBTC,EAAAA,WAvBAH,EAAMI,gBAAkBH,EAAKI,WAAWL,EAAMd,6BA0BhDc,EAAMM,gBAAsBC,EAAKjB,kBAMjCgB,EAAAA,oBAAA,WAxBA,IAAME,EAAMC,EAAEjB,GAAUe,KAAK,MAgC5B,GAHLP,EAAMU,KAAN,wBAA0BC,YAAA,YAGrB,EAAAX,EAAAY,kBAAAC,OA1BG,IAuBR,IAAAC,EAAAjC,EAAA,SAAAmB,EAAAZ,2BAAAP,CAAAmB,EAAAhB,YAAAgB,EAAAY,mBAvBiBG,EAAI,EAAGA,EAAID,EAAKD,OAAQE,IA6BT,OAA1BC,EAAND,GAAwBtB,EAAAK,yBACfmB,EAAAA,KAAL,uBAAAC,SAAA,YADJV,EAAAD,KAAA,aAAAO,EAAAC,GAAAtB,EAAAK,yBAAA,WAAAoB,SAAA,aApBAlB,EAAMG,gBAAkB,SAACgB,GAErB,IAAMC,EAAcX,EAAEU,EAAME,eAAiBF,EAAMG,YAAYC,QAAQ,MACjEjB,EAAUc,EAAYb,KAAK,YACH,SAA3BD,EAAQkB,IAAI,WACXJ,EAAYK,KAAK,gBAAgB,SAEjCL,EAAYK,KAAK,gBAAgB,QAErCnB,EAAQoB,YAAY,KACpBN,EAAYb,KAAK,cAAcoB,YAAY,mCAI/C3B,EAAMU,QAAU,SAACS,GACQ,KAAlBA,EAAMS,SACL5B,EAAMG,gBAAgBgB,IAI9BnB,EAAMgB,gBAAkB,SAACa,GACrB5B,EAAKgB,cAAcY,GACnB5B,EAAKC","file":"ng-dropdownsmtree.min.js","sourcesContent":["/*!\r\n * AngularJS directive for bootstrap dropdown button\r\n * @author Asmaa El-basioni <a.elbasioni@gmail.com>\r\n * https://github.com/aelbasioni/ng-dropdown-sm-tree\r\n */\r\n \r\n /*! Copyright (c) 2018 Asmaa El-basioni and contributors | Licensed under the MIT license */\r\n \r\n 'use strict';\r\n \r\n angular.module('ngDropdownsmtree', [])\r\n .directive('ngDropdownsmtree', ['$filter', ($filter)=> {\r\n     return {\r\n         // can be used as attribute(A) or element(E)\r\n         restrict: 'AE',\r\n         require: 'ngModel',\r\n         replace:true,\r\n         // declare the directive scope as private \r\n         scope: {\r\n             childArrays: '=',            \r\n             parentArray: '=',\r\n             childArraysItemDisplayField: '@',\r\n             parentArrayItemDisplayField: '@',\r\n             childArraysItemSearchField: '@',\r\n             disabled: '=',\r\n             titlePlaceholder: '@'\r\n         },\r\n \r\n         // the markup this directive generates\r\n         template: (iElement, iAttrs) => {\r\n \r\n             const html = `<div class=\"btn-group ng-dropdownsmtree-css\">\r\n                             <button type=\"button\" class=\"btn dropdown-toggle ${iAttrs.controlClass}\" data-ng-class=\"{\\'disabled\\':disabled == true}\"   data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" >\r\n                                 <i class=\"glyphicon glyphicon-triangle-bottom pull-right\" aria-hidden=\"true\"></i>\r\n                                  {{selectedSubItem}}\r\n                             </button>            \r\n                             <ul class=\"dropdown-menu ng-dropdownsmtree-inner-dropdown-menu\" role=\"tree\">\r\n                                 <li ><input type=\"text\" placeholder=\"${iAttrs.searchPlaceholder}\" aria-label=\"${iAttrs.searchPlaceholder}\" class=\"form-control\"  ng-change=\"highlightContainers()\" data-ng-model=\"SearchSubjectFLTR\" data-ng-init=\"SearchSubjectFLTR =\\'\\'\" /></li>\r\n                                 <li data-ng-repeat=\"item in parentArray\" onclick=\"event.stopPropagation();\" data-ng-click=\"showSecondLevel($event)\" data-src=\"{{item[\\'${iAttrs.parentArrayItemIdField}\\']}}\" data-ng-keydown=\"onEnter($event)\" role=\"treeitem\" tabindex=\"0\" aria-expanded=\"false\">\r\n                                     <span><span class=\"glyphicon glyphicon-plus\" aria-hidden=\"true\"></span> {{item[parentArrayItemDisplayField]}}</span>\r\n                                     <ul role=\"group\" class=\"content\">\r\n                                         <li data-ng-repeat=\"sb in childArrays | filter: {${iAttrs.childArraysItemParentId}: item[\\'${iAttrs.parentArrayItemIdField}\\']}: true | filter:{${iAttrs.childArraysItemSearchField}:SearchSubjectFLTR} \">\r\n                                             <a href=\"\" data-ng-click=\"setselecteditem(sb)\" role=\"treeitem\" tabindex=\"-1\"> {{sb[childArraysItemDisplayField] }}</a>\r\n                                         </li>\r\n                                     </ul>                                    \r\n                                 </li>\r\n \r\n                             </ul>\r\n                         </div>`;\r\n \r\n             return html;\r\n         },\r\n \r\n         // this function is called on each ng-Twolevelddl instance initialisation\r\n         // we just declare what we need in the above template\r\n         link: (scope, iElement, iAttrs, ctrl) => {\r\n \r\n             ctrl.$render = () => {\r\n                 if(ctrl.$viewValue)\r\n                   scope.selectedSubItem = ctrl.$viewValue[scope.childArraysItemDisplayField];\r\n                 else\r\n                   scope.selectedSubItem = scope.titlePlaceholder;\r\n             };\r\n             \r\n             scope.highlightContainers = () => {\r\n \r\n                 //remove previous heighlights\r\n                 const elm = $(iElement).find('ul');\r\n                 elm.find(\" >li > span.has-data\").removeClass('has-data');\r\n \r\n                 //height the new elements that contains the new search test\r\n                 if (scope.SearchSubjectFLTR.length > 0) {\r\n                     const _arr = $filter('filter', scope.childArraysItemSearchField)(scope.childArrays, scope.SearchSubjectFLTR);\r\n                     for (let i = 0; i < _arr.length; i++) {\r\n                         if (_arr[i][iAttrs.childArraysItemParentId] === null)\r\n                             elm.find(\"[data-src=''] >span\").addClass('has-data');                        \r\n                         else\r\n                             elm.find(`[data-src=${_arr[i][iAttrs.childArraysItemParentId]}] >span`).addClass('has-data');\r\n                     }\r\n                 }\r\n             };\r\n \r\n             scope.showSecondLevel = (event) => {\r\n \r\n                 const clickedItem = $(event.currentTarget || event.srcElement).closest('li');\r\n                 const content = clickedItem.find('.content');\r\n                 if(content.css(\"display\") === \"none\")\r\n                     clickedItem.attr(\"aria-expanded\",\"false\");\r\n                 else\r\n                     clickedItem.attr(\"aria-expanded\",\"true\");\r\n                 \r\n                 content.slideToggle(500);\r\n                 clickedItem.find('.glyphicon').toggleClass('glyphicon-plus glyphicon-minus');\r\n \r\n             };\r\n \r\n             scope.onEnter = (event) =>{\r\n                 if(event.keyCode === 13){\r\n                     scope.showSecondLevel(event);\r\n                 }\r\n             };\r\n         \r\n             scope.setselecteditem = (sb) => {\r\n                 ctrl.$setViewValue(sb);\r\n                 ctrl.$render();\r\n             };\r\n \r\n         }\r\n \r\n     };\r\n }]); "]}
{"version":3,"sources":["ng-dropdownsmtree.js"],"names":["angular","module","TITLE_PLACEHOLDER","SEARCH_PLACEHOLDER","directive","$filter","ngDropdownsmtreeConfig","require","replace","childArrays","parentArray","childArraysItemDisplayField","parentArrayItemDisplayField","childArraysItemSearchField","parentArrayItemIdField","disabled","titlePlaceholder","template","iElement","iAttrs","html","controlClass","childArraysItemParentId","link","scope","_arr","ctrl","searchPlaceholder","$render","showSecondLevel","selectedSubItem","$viewValue","content","clickedItem","elm","$","find","onEnter","removeClass","SearchSubjectFLTR","length","i","setselecteditem","sb","$setViewValue","addClass","event","currentTarget","srcElement","closest","css","attr","slideToggle","toggleClass","keyCode"],"mappings":"AAQA,aAEAA,QAAQC,OAAO,mBAAoB,IAE3BC,SAAAA,yBADgC,CAEhCC,kBAAoB,iBACrBC,mBAAU,WACTA,UAAO,mBAAA,CAAA,UAAA,yBAAA,SAAAC,EAAAC,GACH,MAAA,CAEAC,SAAS,KACTC,QAJG,UAKHA,SAAA,EAEIC,MAAAA,CACAC,YAFG,IAGHC,YAAAA,IACAC,4BAJG,IAKHC,4BALG,IAMHC,2BANG,IAOHC,uBAPG,IAQHC,SAAAA,IAdDA,iBAAA,KAmBCC,SAAA,SAAAC,EAAAC,GA0CI,MAxCEC,+HAmBND,EAAAE,aAnBM,yyCA4BNF,EAAAG,wBA5BM,mDA4BNH,EAAAN,2BA5BM,+aA6CEU,KAAA,SAAAC,EAAMC,EAAOpB,EAAQqB,GAMpBF,EAAAG,kBAAAH,EAAAG,mBAAArB,EAAAH,mBACJqB,EAAAT,SAAA,SAAAS,EAAAT,SAtBLW,EAAKE,QAAU,WAyBTC,EAAAA,WAvBEL,EAAMM,gBAAkBJ,EAAKK,WAAWP,EAAMb,6BA0B5CqB,EAAUC,gBAAiBT,EAAAR,iBAAjCQ,EAAAR,iBAAAV,EAAAJ,mBAMA8B,EAAAA,oBAAA,WAxBA,IAAME,EAAMC,EAAEjB,GAAUkB,KAAK,MAgC5B,GAHCC,EAAAA,KAAU,wBAAWC,YAAA,YAGtB,EAAAd,EAAAe,kBAAAC,OA1BG,IAuBR,IAAAf,EAAApB,EAAA,SAAAmB,EAAAX,2BAAAR,CAAAmB,EAAAf,YAAAe,EAAAe,mBAvBiBE,EAAI,EAAGA,EAAIhB,EAAKe,OAAQC,IA6BT,OAA1BC,EAAkBD,GAAAtB,EAACwB,yBAChBC,EAAcD,KAAnB,uBAAAE,SAAA,YADJX,EAAAE,KAAA,aAAAX,EAAAgB,GAAAtB,EAAAG,yBAAA,WAAAuB,SAAA,aApBArB,EAAMK,gBAAkB,SAACiB,GAErB,IAAMb,EAAcE,EAAEW,EAAMC,eAAiBD,EAAME,YAAYC,QAAQ,MACjEjB,EAAUC,EAAYG,KAAK,YACF,SAA3BJ,EAAQkB,IAAI,WACZjB,EAAYkB,KAAK,gBAAiB,SAElClB,EAAYkB,KAAK,gBAAiB,QAEtCnB,EAAQoB,YAAY,KACpBnB,EAAYG,KAAK,cAAciB,YAAY,mCAI/C7B,EAAMa,QAAU,SAACS,GACS,KAAlBA,EAAMQ,SACN9B,EAAMK,gBAAgBiB,IAI9BtB,EAAMkB,gBAAkB,SAACC,GACrBjB,EAAKkB,cAAcD,GACnBjB,EAAKE","file":"ng-dropdownsmtree.min.js","sourcesContent":["/*!\r\n * AngularJS directive for bootstrap dropdown button\r\n * @author Asmaa El-basioni <a.elbasioni@gmail.com>\r\n * https://github.com/aelbasioni/ng-dropdown-sm-tree\r\n */\r\n\r\n/*! Copyright (c) 2018 Asmaa El-basioni and contributors | Licensed under the MIT license */\r\n\r\n'use strict';\r\n\r\nangular.module('ngDropdownsmtree', [])\r\n    .constant('ngDropdownsmtreeConfig', {\r\n        TITLE_PLACEHOLDER: 'Choose subitem',\r\n        SEARCH_PLACEHOLDER: 'Search'\r\n    }).directive('ngDropdownsmtree', ['$filter', 'ngDropdownsmtreeConfig', ($filter, ngDropdownsmtreeConfig) => {\r\n        return {\r\n            // can be used as attribute(A) or element(E)\r\n            restrict: 'AE',\r\n            require: 'ngModel',\r\n            replace: true,\r\n            // declare the directive scope as private \r\n            scope: {\r\n                childArrays: '=',\r\n                parentArray: '=',\r\n                childArraysItemDisplayField: '@',\r\n                parentArrayItemDisplayField: '@',\r\n                childArraysItemSearchField: '@',\r\n                parentArrayItemIdField:'@',\r\n                disabled: '@',\r\n                titlePlaceholder: '@'\r\n            },\r\n\r\n            // the markup this directive generates\r\n            template: (iElement, iAttrs) => {\r\n                //Set the default attributes:\r\n\r\n                const html = `<div class=\"btn-group ng-dropdownsmtree-css\">\r\n                            <button type=\"button\" class=\"btn dropdown-toggle ${iAttrs.controlClass}\" data-ng-class=\"{\\'disabled\\':disabled == 'true'}\"   data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" >\r\n                                 <i class=\"glyphicon glyphicon-triangle-bottom pull-right\" aria-hidden=\"true\"></i>\r\n                                  {{selectedSubItem}}\r\n                             </button>            \r\n                             <ul class=\"dropdown-menu ng-dropdownsmtree-inner-dropdown-menu\" role=\"tree\">\r\n                                 <li ><input type=\"text\" placeholder=\"{{searchPlaceholder}}\" aria-label=\"{{searchPlaceholder}}\" class=\"form-control\"  ng-change=\"highlightContainers()\" data-ng-model=\"SearchSubjectFLTR\" data-ng-init=\"SearchSubjectFLTR =\\'\\'\" /></li>\r\n                                 <li data-ng-repeat=\"item in parentArray\" onclick=\"event.stopPropagation();\" data-ng-click=\"showSecondLevel($event)\" data-src=\"{{item[parentArrayItemIdField]}}\" data-ng-keydown=\"onEnter($event)\" role=\"treeitem\" tabindex=\"0\" aria-expanded=\"false\">\r\n                                     <span><span class=\"glyphicon glyphicon-plus\" aria-hidden=\"true\"></span> {{item[parentArrayItemDisplayField]}}</span>\r\n                                     <ul role=\"group\" class=\"content\">\r\n                                         <li data-ng-repeat=\"sb in childArrays | filter: {${iAttrs.childArraysItemParentId}: item[parentArrayItemIdField]}: true | filter:{${iAttrs.childArraysItemSearchField}:SearchSubjectFLTR} \">\r\n                                             <a href=\"\" data-ng-click=\"setselecteditem(sb)\" role=\"treeitem\" tabindex=\"-1\"> {{sb[childArraysItemDisplayField] }}</a>\r\n                                         </li>\r\n                                     </ul>                                    \r\n                                 </li>\r\n \r\n                             </ul>\r\n                         </div>`;\r\n\r\n                return html;\r\n            },\r\n\r\n            // this function is called on each ng-Twolevelddl instance initialisation\r\n            // we just declare what we need in the above template\r\n            link: (scope, iElement, iAttrs, ctrl) => {\r\n\r\n                //Set the default attributes:\r\n                scope.searchPlaceholder = scope.searchPlaceholder || ngDropdownsmtreeConfig.SEARCH_PLACEHOLDER;\r\n                scope.disabled = (scope.disabled === 'true')? true:false;\r\n\r\n                ctrl.$render = () => {\r\n                    if (ctrl.$viewValue)\r\n                        scope.selectedSubItem = ctrl.$viewValue[scope.childArraysItemDisplayField];\r\n                    else\r\n                        scope.selectedSubItem = (scope.titlePlaceholder)? scope.titlePlaceholder : ngDropdownsmtreeConfig.TITLE_PLACEHOLDER;\r\n                };\r\n\r\n                scope.highlightContainers = () => {\r\n\r\n                    //remove previous heighlights\r\n                    const elm = $(iElement).find('ul');\r\n                    elm.find(\" >li > span.has-data\").removeClass('has-data');\r\n\r\n                    //height the new elements that contains the new search test\r\n                    if (scope.SearchSubjectFLTR.length > 0) {\r\n                        const _arr = $filter('filter', scope.childArraysItemSearchField)(scope.childArrays, scope.SearchSubjectFLTR);\r\n                        for (let i = 0; i < _arr.length; i++) {\r\n                            if (_arr[i][iAttrs.childArraysItemParentId] === null)\r\n                                elm.find(\"[data-src=''] >span\").addClass('has-data');\r\n                            else\r\n                                elm.find(`[data-src=${_arr[i][iAttrs.childArraysItemParentId]}] >span`).addClass('has-data');\r\n                        }\r\n                    }\r\n                };\r\n\r\n                scope.showSecondLevel = (event) => {\r\n\r\n                    const clickedItem = $(event.currentTarget || event.srcElement).closest('li');\r\n                    const content = clickedItem.find('.content');\r\n                    if (content.css(\"display\") === \"none\")\r\n                        clickedItem.attr(\"aria-expanded\", \"false\");\r\n                    else\r\n                        clickedItem.attr(\"aria-expanded\", \"true\");\r\n\r\n                    content.slideToggle(500);\r\n                    clickedItem.find('.glyphicon').toggleClass('glyphicon-plus glyphicon-minus');\r\n\r\n                };\r\n\r\n                scope.onEnter = (event) => {\r\n                    if (event.keyCode === 13) {\r\n                        scope.showSecondLevel(event);\r\n                    }\r\n                };\r\n\r\n                scope.setselecteditem = (sb) => {\r\n                    ctrl.$setViewValue(sb);\r\n                    ctrl.$render();\r\n                };\r\n\r\n            }\r\n\r\n        };\r\n    }]); "]}